String pi = "3141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086" +
"51328230664709384460955058223172535940812848111745028410270193852110555964462294895493038196442881097566593344612847564823" +
"37867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678" +
"92590360011330530548820466521384146951941511609433057270365759591953092186117381932611793105118548074462379962749567351885" +
"75272489122793818301194912983367336244065664308602139494639522473719070217986094370277053921717629317675238467481846766940" +
"51320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219" +
"60864034418159813629774771309960518707211349999998372978049951059731732816096318595024459455346908302642522308253344685035" +
"26193118817101000313783875288658753320838142061717766914730359825349042875546873115956286388235378759375195778185778053217" +
"12268066130019278766111959092164201989380952572010654858632788659361533818279682303019520353018529689957736225994138912497" +
"21775283479131515574857242454150695950829533116861727855889075098381754637464939319255060400927701671139009848824012858361" +
"60356370766010471018194295559619894676783744944825537977472684710404753464620804668425906949129331367702898915210475216205" +
"69660240580381501935112533824300355876402474964732639141992726042699227967823547816360093417216412199245863150302861829745" +
"55706749838505494588586926995690927210797509302955321165344987202755960236480665499119881834797753566369807426542527862551" +
"81841757467289097777279380008164706001614524919217321721477235014144197356854816136115735255213347574184946843852332390739" +
"41433345477624168625189835694855620992192221842725502542568876717904946016534668049886272327917860857843838279679766814541" +
"00953883786360950680064225125205117392984896084128488626945604241965285022210661186306744278622039194945047123713786960956" +
"36437191728746776465757396241389086583264599581339047802759009946576407895126946839835259570982582262052248940772671947826" +
"84826014769909026401363944374553050682034962524517493996514314298091906592509372216964615157098583874105978859597729754989" +
"30161753928468138268683868942774155991855925245953959431049972524680845987273644695848653836736222626099124608051243884390" +
"45124413654976278079771569143599770012961608944169486855584840635342207222582848864815845602850601684273945226746767889525" +
"21385225499546667278239864565961163548862305774564980355936345681743241125150760694794510965960940252288797108931456691368" +
"67228748940560101503308617928680920874760917824938589009714909675985261365549781893129784821682998948722658804857564014270";

int curChar = 1;

boolean moving = false;

float x1;
float y1;
float xt;
float yt;

float ellipseRadius = 300;

int lastDigit = 3;

int[] freq = new int[100];

float[][] points = new float[10][2];
void setup() {
	size(1440, 800, OPENGL);
	colorMode(HSB);
	smooth(8);
	background(0,0,0);
	for(int i = 0; i < 10; i++)
	{
		points[i][0] = cos(i / 10.0 * 2 * PI);
		points[i][1] = sin(i / 10.0 * 2 * PI);
	}

	//Setting points to start at 3

	x1 = points[3][0];
	y1 = points[3][1];
}

void draw() {

	//fill(0,0,0,20);
	noStroke();
	//rect(0,0,1440,800);
	noFill();

	if(curChar >= pi.length())
		return;
	newLine();

}

boolean inPlace()
{
	return x1 == xt && y1 == y1;
}

void smoothLine(float x1, float y1, float xt, float yt, int thickness)
{
	strokeWeight(thickness);
	stroke(curChar % 256, 255, 255, 50);
	line(x1 * ellipseRadius + 720,y1 * ellipseRadius + 400, xt * ellipseRadius + 720,yt * ellipseRadius + 400);
}

void smoothCircle(float x1, float y1, int thickness)
{
	fill(curChar % 256, 255, 255);
	ellipse(x1 * ellipseRadius + 720,y1 * ellipseRadius + 400, thickness * 2, thickness * 2);
}

void newLine()
{
	int curDigit = int(pi.charAt(curChar) + "");

	xt = points[curDigit][0];
	yt = points[curDigit][1];

	if(lastDigit != curDigit)
		smoothLine(x1,y1,xt,yt,freq[lastDigit * 10 + curDigit]++);
	else
		smoothCircle(x1,y1,freq[lastDigit * 10 + curDigit]++);
	x1 = xt;
	y1 = yt;

	lastDigit = curDigit;
	curChar++;
}
