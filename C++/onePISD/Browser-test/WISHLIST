-*- WISHLST -*-

proxy auth type and http auth type for this: http://user:password@www.example.com

ssl 3.0 and tls 1.0 same as a real browser but might add dependencies

threaded ssl openssl gnuTLS

br.encoding() for utf-8 and others

Write a man page that says some stuffs about the library

curl_multi using this for multiple handle at the same time and pipelining

check the $(curl-config --feature) to know with which feature the cULR library was built

Convert it to a static and shared library for multiple OS

change br.response into a class like in python:
>>> dir(br.response())
['__copy__', '__doc__', '__getattr__', '__init__', '__iter__', '__module__', '__repr__', '__setattr__', '_headers', '_seek_wrapper__cache', '_seek_wrapper__have_readline', '_seek_wrapper__is_
closed_state', '_seek_wrapper__pos', '_seek_wrapper__read_complete_state', 'close', 'get_data', 'geturl', 'info', 'invariant', 'next', 'read', 'readline', 'readlines', 'seek', 'set_data', 'te
ll', 'wrapped', 'xreadlines']

Review the whole code to make it more clean and more efficient

use StringPoolL or better algorithm instead of cstring for real efficiency (long string accessed many times is cpu and ram intensive)


-*- TODO -*-

* What's wrong with the forms, why do I need to convert from one type to another.
        void Browser::select_form(int number_start_from_zero)

* Syntax, more comments, functions names (regex.hpp)?

* Efficiency, compile time.

* Split up huge foos

* get_first_root() does it always work like that, I don't think so.
        When something.php for POST add to the first root.
        When /something/something.php add to the plain web root.
        void Browser::submit(int timeout=30)  contains the same thing, why?

* void Browser::follow_link(std::string name_of_link_to_follow, int usertimeout=20)
        is that done the right way?

* Review the whole forms.hpp because it's nasty.

* Review every single regex. Break them up into easy to understand little pieces.
